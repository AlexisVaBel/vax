<!doctype html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <script src="vendor/underscore.js" type="text/javascript"></script>
    <script src="vendor/jquery.js" type="text/javascript"></script>
    <script src="vendor/raphael.js" type="text/javascript"></script>
    <script src="vendor/chosen/chosen.jquery.js" type="text/javascript"></script>
    <script src="vax.js" type="text/javascript"></script>
    <script src="schema.js" type="text/javascript"></script>

    <link rel="stylesheet" href="vendor/chosen/chosen.min.css" type="text/css"/>
    <link rel="stylesheet" href="styles.css" type="text/css"/>
</head>
<body>
<style type="text/css">
    body {
        background: #111;
    }
    #eval {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1000;
    }
</style>
<div id="vax-test" style="width: 1800px; height: 950px;"></div>

<!--
<div class="help">
    <ul>
        <li>Press X to add a new node</li>
        <li>Double click a node caption or a wire to remove it</li>
    </ul>
</div>
-->

<button id="eval" type="button">Eval!</button>


<script type="text/javascript">
    $(function()
    {
        window.myVAX = new VAX('vax-test', {schema: vaxSchema});

        // window.bp = {"version":"0.1","nodes":[{"id":2,"c":"Tbl_Order","x":374,"y":260,"a":{"Alias":"o"}},{"id":5,"c":"Tbl_Customer","x":376,"y":427,"a":{"Alias":"ct"}},{"id":8,"c":"Tbl_LegalEntity","x":575,"y":568,"a":{"Alias":"le"}},{"id":11,"c":"SmartJoin","x":808,"y":493,"a":{"Type":"INNER"}},{"id":18,"c":"SmartJoin","x":603,"y":315,"a":{"Type":"INNER"}},{"id":25,"c":"Col_Order_DeliveryStatus","x":784,"y":11,"a":{"Alias":"delivery_status"}},{"id":29,"c":"CountAsteriks","x":989,"y":-10,"a":{"Alias":"cnt"}},{"id":32,"c":"Result","x":1702,"y":395},{"id":34,"c":"Select","x":1515,"y":241,"a":{"Alias":""}},{"id":43,"c":"GroupBy","x":1093,"y":205},{"id":47,"c":"GatherColumns","x":1271,"y":-20},{"id":55,"c":"LegalEntity_FullName","x":797,"y":151,"a":{"Alias":"le_fullname"}},{"id":59,"c":"Param","x":1191.6371532060002,"y":674.0432629600473,"t":{"T":"IdExpr"},"a":{"title":"CTID"}},{"id":62,"c":"CustomSql","x":1188.6371532060002,"y":546.0432629600473,"t":{"T":"IdExpr"},"a":{"SQL":"o.customer_id"}},{"id":65,"c":"TypedEq","x":1336.6371532060002,"y":498.0432629600473,"t":{"T":"IdExpr"}}],"wires":[[2,"O",18,"L"],[5,"O",18,"R"],[8,"O",11,"R"],[2,"O",25,"T"],[34,"O",32,"S"],[43,"O",34,"GROUP"],[11,"O",34,"FROM"],[47,"O",34,"Cols"],[8,"O",55,"T"],[65,"O",34,"WHERE"],[62,"O",65,"A"],[59,"O",65,"B"],[25,"O",43,"E"],[55,"O",43,"Prev"],[29,"O",47,"A"],[43,"O",47,"Prev"],[18,"O",11,"Prev"],[5,"O",11,"L"],[2,"O",18,"Prev"]]};

        window.bp = {"version":"0.1","nodes":[{"id":2,"c":"UF_Input","x":517,"y":154,"t":{"T":"BooleanExpr"},"a":{"Name":"1","Title":"Title"}},{"id":6,"c":"UF_Input","x":516,"y":323,"t":{"T":"BooleanExpr"},"a":{"Name":"2","Title":"Title"}},{"id":10,"c":"UF_Input","x":517,"y":505,"t":{"T":"BooleanExpr"},"a":{"Name":"3","Title":"Title"}},{"id":14,"c":"UF_Function","x":1201,"y":518,"a":{"Name":"AND 3","Description":"AND 3"}},{"id":19,"c":"UF_Output","x":1046,"y":416,"t":{"T":"BooleanExpr"},"a":{"Name":"O","Title":"Title"}},{"id":24,"c":"And","x":706,"y":292},{"id":28,"c":"And","x":888,"y":387}],"wires":[[2,"O",24,"A"],[6,"O",24,"B"],[10,"O",28,"B"],[24,"O",28,"A"],[28,"O",19,"I"],[19,"O",14,"Outputs"]]};


        myVAX.loadGraph(bp);

        // eval
        $('#eval').click(function()
        {
            var trees = myVAX.composeTrees();

            if (trees.length !== 1)
            {
                return alert("There should be exactly one tree!");
            }

            var root = trees[0];

            if (root.c !== "Result")
            {
                return alert("Root node should be 'Result'!");
            }

            var walkCalc = function walk(node)
            {
                if (!node)
                {
                    return '';
                }

                switch (node.c)
                {
                    case 'Result':
                        return 'Result = ' + walk(node.links.I);

                    case 'Add':
                        return walk(node.links.A) + walk(node.links.B);

                    case 'Sub':
                        return walk(node.links.A) - walk(node.links.B);

                    case 'Mul':
                        return walk(node.links.A) * walk(node.links.B);

                    case 'Div':
                        return walk(node.links.A) / walk(node.links.B);

                    case 'Constant':
                        return parseInt(node.a.V);

                    default:
                        throw new Error("Unsupported node component: " + node.component);
                }
            };

            var walkSql = function walkSql(node)
            {
                if (!node)
                {
                    return '';
                }

                switch (node.c)
                {
                    case 'Result':
                        return walkSql(node.links.S);

                    case 'Select':
                        var cols     = walkSql(node.links.Cols);
                        var from     = walkSql(node.links.FROM);
                        var where    = walkSql(node.links.WHERE);
                        var order    = walkSql(node.links.ORDER);
                        var grouping = walkSql(node.links.GROUP);
                        var having   = walkSql(node.links.HAVING);

                        var sql = ' SELECT ' + cols;
                        if (from)
                        {
                            sql = sql + '\n FROM ' + from;
                        }

                        if (where)
                        {
                            sql = sql + '\n WHERE ' + where;
                        }

                        if (order)
                        {
                            sql = sql + '\n ORDER BY ' + order;
                        }

                        if (grouping)
                        {
                            sql = sql + '\n GROUP BY ' + grouping;
                        }

                        if (having)
                        {
                            sql = sql + '\n HAVING ' + having;
                        }

                        return sql;
                        break;

                    case 'Tbl_Order':
                        return 'tbl_order AS ' + node.a.Alias;

                    case 'Tbl_Customer':
                        return 'tbl_customer AS ' + node.a.Alias;

                    case 'Tbl_LegalEntity':
                        return 'tbl_legal_entity AS ' + node.a.Alias;

                    case 'SmartJoin':
                        var l = node.links.L.c;
                        var r = node.links.R.c;

                        var onMap = {
                            'Tbl_Order.Tbl_Customer': 'o.customer_id = ct.id',
                            'Tbl_Customer.Tbl_LegalEntity': 'le.id = ct.legal_entity_id',
                        };

                        return walkSql(node.links.Prev) + '\n ' + node.a.Type + ' JOIN ' + walkSql(node.links.R) + ' ON ' + onMap[l + '.' + r];


                    case 'GroupBy':
                        var exprs = _.filter([walkSql(node.links.E), walkSql(node.links.Prev)]);
                        return exprs.join(', ');

                    case 'GatherColumns':
                        var exprs = _.filter([walkSql(node.links.A), walkSql(node.links.B), walkSql(node.links.C),walkSql(node.links.D), walkSql(node.links.E), walkSql(node.links.Prev)]);
                        return exprs.join(', ');

                    case 'Col_Order_DeliveryStatus':
                        return 'o.delivery_status';

                    case 'LegalEntity_FullName':
                        return " le.inn || le.form_of_institution || ' ' || le.name";

                    case 'TypedEq':
                    case 'Eq':
                        return ' ' + walkSql(node.links.A) + ' = ' + walkSql(node.links.B) + ' ';

                    case 'CustomSql':
                        return node.a.SQL;

                    case 'CountAsteriks':
                        return ' COUNT(*) AS ' + node.a.Alias + ' ';

                    case 'Param':
                        return ' $$' + node.a.title + '$$ ';


                    default:
                        return ''; // throw new Error("Unsupported node component: " + node.component);
                }
            };

            var res = walkSql(root);

            alert(res);
        });
    });
</script>



</body>
</html>